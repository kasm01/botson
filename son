import os
import time
import numpy as np
import pandas as pd
import requests
import logging
import traceback
from dotenv import load_dotenv
from binance.client import Client
from binance.enums import *
import ta
from arch import arch_model
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout, Bidirectional, Conv1D, MaxPooling1D, Flatten
from sklearn.preprocessing import MinMaxScaler
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier, StackingClassifier
from sklearn.linear_model import LogisticRegression
from xgboost import XGBRegressor
from stable_baselines3 import PPO
from gym import spaces
from transformers import TimeSeriesTransformer
from deap import base, creator, tools
from bayes_opt import BayesianOptimization

# 📌 **Ortam Değişkenlerini Yükle**
load_dotenv()

BINANCE_API_KEY = os.getenv("70545197030f91dcd85316478ef03e15fdf565514a0bfcd6afe915dc93b0c69b")
BINANCE_API_SECRET = os.getenv("8c403fbf9b9bdd003bc38a7162f89b96f8f97a3df48244a542685023dc9b2033")

# 📌 Binance Futures TESTNET API bağlantısı
client = Client(BINANCE_API_KEY, BINANCE_API_SECRET, testnet=True)

# 📌 **Logging Sistemi**
logging.basicConfig(filename="bot4.log", level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# 📌 **Binance API'den Piyasa Verisini Çek**
def get_binance_ta(symbol="BTCUSDT", interval="1h", limit=100):
    try:
        klines = client.futures_klines(symbol=symbol, interval=interval, limit=limit)
        return [float(candle[4]) for candle in klines]  # Kapanış fiyatları
    except Exception as e:
        logging.error(f"Binance veri çekme hatası: {str(e)}")
        return None

# 📌 **RSI ve MACD Teknik Analizi (Python `ta` Kütüphanesi Kullanıldı)**
def calculate_indicators(prices):
    df = pd.DataFrame(prices, columns=["close"])
    df["rsi"] = ta.momentum.RSIIndicator(df["close"]).rsi()
    df["macd"] = ta.trend.MACD(df["close"]).macd()
    return df["rsi"].iloc[-1], df["macd"].iloc[-1]

# 📌 **Volatilite Tahmini (GARCH)**
def predict_volatility(prices):
    try:
        model = arch_model(prices, vol='Garch', p=1, q=1)
        fitted = model.fit(disp="off")
        return fitted.conditional_volatility[-1]
    except Exception as e:
        logging.error(f"GARCH hatası: {str(e)}")
        return None

# 📌 **LSTM Modeli ile Fiyat Tahmini**
def train_lstm_model(price_data):
    try:
        scaler = MinMaxScaler(feature_range=(0,1))
        scaled_data = scaler.fit_transform(np.array(price_data).reshape(-1, 1))
        X, y = [], []
        for i in range(60, len(scaled_data)):
            X.append(scaled_data[i-60:i, 0])
            y.append(scaled_data[i, 0])
        X, y = np.array(X), np.array(y)
        X = np.reshape(X, (X.shape[0], X.shape[1], 1))

        model = Sequential([
            Bidirectional(LSTM(50, return_sequences=True)),
            Dropout(0.2),
            LSTM(50),
            Dropout(0.2),
            Dense(1)
        ])
        model.compile(optimizer="adam", loss="mse")
        model.fit(X, y, epochs=10, batch_size=32, verbose=1)
        return model, scaler
    except Exception as e:
        logging.error(f"LSTM modeli eğitme hatası: {str(e)}")
        return None, None

# 📌 **Risk Yönetimi**
def calculate_stop_loss(entry_price, volatility):
    return round(entry_price * (1 - np.interp(volatility, [0.01, 0.05], [0.005, 0.02])), 2)

def calculate_take_profit(entry_price, volatility):
    return round(entry_price * (1 + np.interp(volatility, [0.01, 0.05], [0.01, 0.04])), 2)

# 📌 **Binance Futures TESTNET İşlem Açma**
def execute_trade_safe(symbol, trade_type, quantity, leverage):
    try:
        client.futures_change_leverage(symbol=symbol, leverage=leverage)
        side = SIDE_BUY if trade_type == "LONG" else SIDE_SELL
        client.futures_create_order(symbol=symbol, side=side, type=ORDER_TYPE_MARKET, quantity=quantity)
        logging.info(f"🚀 {trade_type} işlemi açıldı: {symbol}, Kaldıraç: {leverage}x")
    except Exception as e:
        logging.error(f"İşlem açma hatası: {str(e)}")

# 📌 **Botun Çalıştırılması**
if __name__ == "__main__":
    try:
        prices = get_binance_ta()
        if not prices or len(prices) < 60:
            raise ValueError("⚠️ Binance API'den yeterli veri yok!")

        entry_price = prices[-1]
        market_volatility = predict_volatility(prices)
        rsi, macd = calculate_indicators(prices)

        lstm_model, lstm_scaler = train_lstm_model(prices)
        predicted_price = lstm_model.predict(np.array(prices[-60:]).reshape(1, 60, 1)) if lstm_model else None

        trade_type = "LONG" if np.random.rand() > 0.5 else "SHORT"
        stop_loss = calculate_stop_loss(entry_price, market_volatility)
        take_profit = calculate_take_profit(entry_price, market_volatility)
        leverage = np.random.randint(1, 5)

        execute_trade_safe("BTCUSDT", trade_type, 0.01, leverage)
        logging.info(f"📈 AI Kararı: {trade_type} | Fiyat: {predicted_price if predicted_price is not None else 'N/A'} USD")

    except Exception as e:
        logging.error(traceback.format_exc())
        
